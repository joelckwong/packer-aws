packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1"
    }
  }
}

variable "aws_access_key" {
  type    = string
  default = ""
}

variable "aws_region" {
  type    = string
  default = "us-east-1"
}

variable "aws_secret_key" {
  type    = string
  default = ""
}

variable "ssh_username" {
  type    = string
  default = "ec2-user"
}

variable "subnet_id" {
  type    = string
  default = ""
}

variable "vpc_id" {
  type    = string
  default = ""
}

data "amazon-ami" "autogenerated_1" {
  access_key = "${var.aws_access_key}"
  filters = {
    name                = "RHEL-9.6.0_HVM-*-x86_64-*-Hourly2-GP3"
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["309956199498"]
  region      = "${var.aws_region}"
  secret_key  = "${var.aws_secret_key}"
}

locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

locals {
  ami_name = "rhel9-stig-${legacy_isotime("2006-01-02")}-${local.timestamp}"
}

source "amazon-ebs" "autogenerated_1" {
  access_key                  = "${var.aws_access_key}"
  ami_name                    = "${local.ami_name}"
  associate_public_ip_address = true
  communicator                = "ssh"
  force_deregister            = "true"
  instance_type               = "t3.medium"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    encrypted             = true
    volume_size           = 64
    volume_type           = "gp3"
  }
  region = "${var.aws_region}"
  run_tags = {
    Name = "packer-build-image"
  }
  secret_key   = "${var.aws_secret_key}"
  source_ami   = "${data.amazon-ami.autogenerated_1.id}"
  ssh_username = "${var.ssh_username}"
  subnet_id    = "${var.subnet_id}"
  tags = {
    Name = "${local.ami_name}"
  }
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "shell" {
    inline = "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done"
  }

  provisioner "shell" {
    script = "./provisioners/scripts/bootstrap.sh"
  }

  provisioner "shell" {
    script           = "./provisioners/scripts/oscap-stig9.sh"
    valid_exit_codes = [0, 1, 2]
  }

  provisioner "shell" {
    script = "./provisioners/scripts/cleanup.sh"
  }

}
